关于transform  这个相对来说比较容易理解参见  https://developer.mozilla.org/zh-CN/docs/CSS/transform
	关于rotate旋转一点:
	   transform:rotate(-15deg)；  /*单单这样是属于 整体的旋转*/
	   transform: perspective(400px) rotateY(40deg);   
	   重点讲解 perspctive   http://www.webjx.com/css/divcss-33347.html   http://ecd.tencent.com/css3/html/animation/perspective.html
	     1: 他们都只是将2D图形 "扭曲"成一个仿立方体  并非真正的3D  真正3D目前只有 webkit支持
	     2:只能选择透视方式，也就是近大远小的显示方式。

	   eg1: rotateX/Y 一起使用
	   	   transform: perspective(400px) rotateY(40deg); /*Y轴扭曲旋转*/
	   eg2: 与perspective-origin(镜面)一起使用 打造平面"3D"[动画]效果
	   		transform-origin:0 0;transform:rotate(45deg);

	   perspective-origin: 镜面位置 perspective 扭曲参照点 
	   					   见: http://ecd.tencent.com/css3/html/animation/perspective-origin.html
	   					   	  http://css.doyoe.com/properties/transform/transform-origin.htm




transition：  http://css.doyoe.com/properties/transition/index.htm

	transition：[ transition-property:参与过渡的属性(比如我要改变背景-:border-color) ] || [ transition-duration在这个时间内把这个变换搞定 ] || [ transition-timing-function 以哪种方式执行 ] || [ transition-delay 当变换条件到了,几秒后我再执行变换 ]

	ps: 目前火狐已经执行标准方式 无需加前缀

	eg1:
	  .test li{
	  	.......
		transition:background-color 4s ease-in 8s;
		}

	.test li:nth-child(1):hover{background-color:#bbb;}

	eg2:与transform一起使用
	.box {
	    .......
	    transition:width 2s, height 2s, background-color 2s, transform 2s;  /*以此执行每个变换*/
	}
	.box:hover {
	    .......
	    background-color: #FFCCCC;
	    transform:rotate(180deg);
	}

	eg3:与js一起连用
		css:
			p{padding-left:60px;}
			#foo{
				border-radius:50px;
				width:50px;
				height:50px;
				background:#c00;
				position:absolute;
				top:0;
				left:0;
				-moz-transition: all 1s; 
				-webkit-transition: all 0.2s;  
				-ms-transition: all 1s;  
				-o-transition: all 1s;  
				transition: all 1s;  
			}
		js:
			var f = document.getElementById('foo');
			document.addEventListener('click', function(ev){
			    f.style.left = (ev.clientX-25)+'px';
			    f.style.top = (ev.clientY-25)+'px';
			},false);    

animation:  http://css.doyoe.com/properties/animation/animation.htm

	animation：[[ animation-name (动画名称) ] || [ animation-duration(多长时间执行完) ] || [ animation-timing-function(以什麽方式执行动画) ] || [ animation-delay(调节具备后,何时开始动画) ] || [ animation-iteration-count (是否循环) ] || [ animation-direction(是否来回交替) ]||[ animation-fill-mode(结束后呈现什麽姿态 开始?还是结束状态?) ]] ;
	animation-play-state  一般单独使用  作为另一种条件使用  用于是否中途暂停 或者启动

	ps: 火狐支持正规写法

	创建动画:
	eg:
		@keyframes animationName{
			0%{-ms-transform:translate(0);opacity:0;}
			50%{-ms-transform:translate(30px);opacity:1;}
			70%{-ms-transform:translate(35px);opacity:1;}
			100%{-ms-transform:translate(60px);opacity:0;}
		}

	使用动画:
	eg:
		animation:animationName 2s ease-out 0s infinite alternate;


--------------------------------------------------------------数学知识补充----------------------------------------------------------------------------------
-y         -
-        -
-       -
-    r -
-     -
-    -
-   -
-  -    
- - A
- - - - - - - - - - - - - - - x
sinA=y/r;
cosA=x/r;

//方 根号
Math.pow(2,3)=8
3=Math(8)/Math.log(2);  


Math.sin(x)    弧度x 的正玄值。返回值在 -1.0 到 1.0 之间；

Math.cos(x)    弧度x 的余弦值。返回的是 -1.0 到 1.0 之间的数；

弧度的计算公式为： 2*PI/360*角度；    Math.PI是180度的弧度


如何得到圆上每个点的坐标？

	解决思路：根据三角形的正玄、余弦来得值；

	假设一个圆的圆心坐标是(a,b)，半径为r，

	则圆上每个点的Y坐标=a + Math.sin((2*Math.PI / 360)*度数) * r ；X坐标=b + Math.cos((2*Math.PI / 360)*度数) * r ；
	

ps:  css和canvas中 默认旋转度 都是水平 即180度 因此我们计算钟表的时候 必须加上90度. 

--  http://baike.baidu.com/view/84885.htm



