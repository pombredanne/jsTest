/*
 Masked Input plugin for jQuery
 Copyright (c) 2007-2013 Josh Bush (digitalbush.com)
 Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
 Version: 1.3.1
 */
(function($) {
    function getPasteEvent() {
        var el = document.createElement('input'),
            name = 'onpaste';
        el.setAttribute(name, '');
        return (typeof el[name] === 'function')?'paste':'input';
    }

    var pasteEventName = getPasteEvent() + ".format",
        ua = navigator.userAgent,
        iPhone = /iphone/i.test(ua),
        android=/android/i.test(ua),
        caretTimeoutId;

    $.format = {
        definitions: {
            '9': "[0-9]",
            'a': "[A-Za-z]",
            '*': "[A-Za-z0-9]"
        },
        dataName: "rawMaskFn",
        placeholder: '_'
    };

    $.fn.extend({
        caret: function(begin, end) {       // 光标设置
            var range;

            if(this.length === 0 || this.is(":hidden")) {
                return;
            }

            if (typeof begin == 'number') {
                end = (typeof end === 'number') ? end : begin;
                return this.each(function() {
                    if (this.setSelectionRange) {
                        this.setSelectionRange(begin, end);
                    } else if (this.createTextRange) {
                        range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', begin);
                        range.select();
                    }
                });
            } else {
                if (this[0].setSelectionRange) {
                    begin = this[0].selectionStart;
                    end = this[0].selectionEnd;
                } else if (document.selection && document.selection.createRange) {
                    range = document.selection.createRange();
                    begin = 0 - range.duplicate().moveStart('character', -100000);
                    end = begin + range.text.length;
                }
                return { begin: begin, end: end };
            }
        },
        unmask: function() {
            return this.trigger("unmask");
        },
        mask: function(format, settings) {
            var input,
                regRoles,
                regArr=[],
                partialPosition,
                firstNonMaskPos=null,
                len;

            if (!format && this.length > 0) {
                input = $(this[0]);
                return input.data($.format.dataName)();
            }
            settings = $.extend({
                placeholder: $.format.placeholder,
                completed: false,
                blurShow:false
            }, settings);


            regRoles = $.format.definitions;
            partialPosition = len = format.length;

            $.each(format.split(""), function(i, c) {     // 整合出正则数组 格式的正则规则 
                if (c == '?') {
                    len--;
                    partialPosition = i;
                } else if (regRoles[c]) {
                    regArr.push(new RegExp(regRoles[c]));
                    if (firstNonMaskPos === null) {
                        firstNonMaskPos = regArr.length - 1;
                    }
                } else {
                    regArr.push(null);
                }
            });

            return this.trigger("unmask").each(function() {
                var input = $(this),
                    placeArr = $.map(       // 将规定格式转换为 制定占位符号格式
                        format.split(""),
                        function(c, i) {
                            if (c != '?') {
                                return regRoles[c] ? settings.placeholder : c;
                            }
                        }),
                    focusText = input.val();

                input.data($.format.dataName,function(){
                    return $.map(placeArr, function(c, i) {
                        return regArr[i]&&c!=settings.placeholder ? c : null;
                    }).join('');
                });

                if (!input.attr("readonly")){
                    input.one("unmask", function() {
                        input.unbind(".format").removeData($.format.dataName);
                    })
                        .bind("focus.format", function() {
                            clearTimeout(caretTimeoutId);
                            var pos;

                            focusText = input.val();
                            pos = checkVal(settings.blurShow&&focusText.search(settings.placeholder)>-1);

                            caretTimeoutId = setTimeout(function(){
                                placeArrtoStr();
                                if (pos == format.length) {
                                    input.caret(0, pos);
                                } else {
                                    input.caret(pos);
                                }
                            }, 10);
                        })
                        .bind("blur.format", function() {
                            checkVal(settings.blurShow);
                            if (input.val() != focusText){
                                input.change();
                            }
                        })
                        .bind("keydown.format", function(e){
                            var k = e.which, pos, begin, end;

                            if (k === 8 || k === 46 || (iPhone && k === 127)) { //  8:前删除 46:后删除 127 iphone系列
                                pos = input.caret();
                                begin = pos.begin;
                                end = pos.end;

                                if (end - begin === 0) {
                                    begin=k!==46?seekPrev(begin):(end=seekNext(begin-1));
                                    end=k===46?seekNext(end):end;
                                }
                                clearBuffer(begin, end);
                                shiftL(begin, end - 1);

                                e.preventDefault();
                            } else if (k == 27) {//esc
                                input.val(focusText);
                                input.caret(0, checkVal());
                                e.preventDefault();
                            }
                        })
                        .bind("keypress.format", function(e){
                            var k = e.which, pos = input.caret(), p, c, next,completed=settings.completed;

                            if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {     //特殊按键
                                return;
                            } else if (k) {
                                if (pos.end - pos.begin !== 0){
                                    clearBuffer(pos.begin, pos.end);
                                    shiftL(pos.begin, pos.end-1);
                                }

                                p = seekNext(pos.begin - 1);
                                if (p < len) {
                                    c = String.fromCharCode(k);
                                    if (regArr[p].test(c)) {
                                        shiftR(p);

                                        placeArr[p] = c;
                                        placeArrtoStr();
                                        next = seekNext(p);

                                        if(android){
                                            setTimeout($.proxy($.fn.caret,input,next),0);
                                        }else{
                                            input.caret(next);
                                        }

                                        if ($.isFunction(completed) && next >= len) {
                                            completed.call(input);
                                        }
                                    }
                                }
                                e.preventDefault();
                            }
                        })
                        .bind(pasteEventName, function() {
                            setTimeout(function() {
                                var pos=checkVal(true),completed=settings.completed;
                                input.caret(pos);
                                if($.isFunction(completed) && pos == input.val().length)
                                    completed.call(input);
                            }, 0);
                        });
                }

                checkVal();

                function seekNext(pos) {
                    while (++pos < len && !regArr[pos]);
                    return pos;
                }

                function seekPrev(pos) {
                    while (--pos >= 0 && !regArr[pos]);
                    return pos;
                }

                function shiftL(begin,end) {
                    var i,
                        j;

                    if (begin<0) {
                        return;
                    }

                    for (i = begin, j = seekNext(end); i < len; i++) {
                        if (regArr[i]) {
                            if (j < len && regArr[i].test(placeArr[j])) {
                                placeArr[i] = placeArr[j];
                                placeArr[j] = settings.placeholder;
                            } else {
                                break;
                            }

                            j = seekNext(j);
                        }
                    }
                    placeArrtoStr();
                    input.caret(Math.max(firstNonMaskPos, begin));
                }

                function shiftR(pos) {
                    var i,placeholder, next, placeCache;
                    for (i = pos, placeholder = settings.placeholder; i < len; i++) {
                        if (regArr[i]) {
                            next = seekNext(i);
                            placeCache = placeArr[i];
                            placeArr[i] = placeholder;
                            if (next < len && regArr[next].test(placeCache)) {
                                placeholder = placeCache;
                            } else {
                                break;
                            }
                        }
                    }
                }

                function clearBuffer(start, end) {
                    var i;
                    for (i = start; i < end && i < len; i++) {
                        if (regArr[i]) {
                            placeArr[i] = settings.placeholder;
                        }
                    }
                }

                function placeArrtoStr() { input.val(placeArr.join('')); }

                function checkVal(allow) {
                    var value = input.val(),
                        lastMatch = -1,
                        i, c,pos=0;
                    for (i = 0; i < len; i++) {
                        if (regArr[i]){
                            placeArr[i] = settings.placeholder;
                            while (pos++ < value.length) {
                                c = value.charAt(pos - 1);
                                if (regArr[i].test(c)) {
                                    placeArr[i] = c;
                                    lastMatch = i;
                                    break;
                                }
                            }
                            if (pos > value.length) {
                                break;
                            }
                        } else if (placeArr[i] === value.charAt(pos) && i !== partialPosition) {
                            pos++;
                            lastMatch = i;
                        }
                    }
                    if (allow) {
                        placeArrtoStr();
                    } else if (lastMatch + 1 < partialPosition) {
                        input.val("");
                        clearBuffer(0, len);
                    } else {
                        placeArrtoStr();
                        input.val(input.val().substring(0, lastMatch + 1));
                    }
                    return (partialPosition ? i : firstNonMaskPos);
                }

            });
        }
    });

})(jQuery);
