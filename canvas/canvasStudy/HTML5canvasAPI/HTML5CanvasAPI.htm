<!DOCTYPE html>
<html>
<head>
<meta charset='UTF-8'>
<style type="text/css">
    section,h1,header{
        width: 400px;
    }
    section{
        float: left;
        margin:20px 20px;
    }
    h1{
        margin: 0 0;

    }
</style>
<title>canvas 学习</title>
</head>
<body>
    <section>
        <header>
            <h1>画矩形</h1>
        </header>
        <canvas id="canvasRect" width="400" height="300"></canvas>

        <script type="text/javascript">
            function canvasRect(id) {
                var canvas = document.getElementById(id)
                if (canvas == null){
                    return false;
                }
                var context = canvas.getContext("2d");

                context.font="24px Helvetica";
                context.fillText('点击任何地方 清除该画布',45,250);
                context.canvas.onmousedown=function(){
                    context.clearRect(0,0,canvas.width,canvas.height);
                }

                context.fillRect(0, 0, 100, 100);
                context.strokeRect(120, 0, 100, 100);

                context.fillStyle = "red";
                context.fillRect(0, 120, 100, 100);

                context.strokeStyle = "blue";
                context.strokeRect(120, 120, 100, 100);

                //设置透明度实践证明透明度值>0,<1值越低，越透明，值>=1时为纯色，值<=0时为完全透明
                context.fillStyle = "rgba(255,0,0,0.2)";
                context.fillRect(240,0 , 100, 100);

                context.strokeStyle = "rgba(255,0,0,0.2)";
                context.strokeRect(240, 120, 100, 100);
            }
            canvasRect('canvasRect');
        </script>
    </section>

    <section>
        <header>
            <h1>绘制路径</h1>
        </header>
        <canvas id="canvasPath" width="400" height="300"></canvas>

        <script type="text/javascript">
            function canvasPath(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext('2d'),
                    n = 0;

                //左侧1/4圆弧
                context.beginPath();
                context.arc(100, 150, 50, 0, Math.PI/2 , false);
                context.strokeStyle = 'rgba(255,0,0,0.25)'
                context.closePath();
                context.stroke();

                //右侧1/4圆弧
                context.beginPath();
                context.arc(300, 150, 50, 0, Math.PI/2 , false);
                context.fillStyle = 'rgba(255,0,0,0.25)';
                context.fill();     // fill 填充的是 路径包起来的范围 比如 正方形里面加了一个圆 填充不是那个圆 是外面包起来的范围  TODO 但是 如果正方形中包围一个rect则 会全部包围 因此如果想达到以上效果 可以尝试使用 canvas书中的制作剪纸图形里用 路径来自己花
                context.strokeStyle = 'blue';
                context.closePath();
                context.stroke();
            }
            canvasPath('canvasPath');
        </script>
    </section>


    <section>
        <header>
            <h1>画圆(arc)</h1>
        </header>
        <canvas id="canvasArc" width="400" height="300"></canvas>

        <script type="text/javascript">
            function canvasArc(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext('2d');

                context.beginPath();
                context.arc(100, 100, 80, 0, Math.PI * 2, true); // TODO 在绘制类似同心圆的时候 外圆 和内圆 顺时针 逆时针不同才能绘制出空心的 否则就是大圆内画小园
                context.closePath();
                context.fillStyle = 'rgba(0,255,0,0.25)';
                context.fill();

                //context.strokeStyle='yellow';
                context.beginPath();
                context.moveTo(200,0);
                context.lineTo(200,100);
                context.arcTo(200,180,280,180,45);  // 关于圆弧的介绍 --http://www.mb5u.com/HTML5/html5_96424.html
                context.lineTo(320,180);
                context.closePath();
                context.stroke();
            }
            canvasArc('canvasArc')
        </script>
    </section>

    <section>
        <header>
            <h1>画线(lineTo moveTo)</h1>
        </header>
        <canvas id="canvasLineTest" width="400" height="300"></canvas>

        <script type="text/javascript">
            function canvasLineTest(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d");

                context.beginPath();
                context.strokeStyle = "rgb(250,0,0)";
                //实验证明第一次lineTo的时候和moveTo功能一样
                context.lineTo(100, 100);
                //之后的lineTo会以上次lineTo的节点为开始
                context.lineTo(200, 200);
                context.lineTo(200, 100);
                context.moveTo(200, 50);
                context.lineTo(100,50);
                context.closePath();  //closePath 关不关 都无关紧要 但是如果不是为了特殊效果 必须关闭
                context.stroke();
            }
            canvasLineTest('canvasLineTest')
        </script>
    </section>
    
    <section>
        <header>
            <h1>贝塞尔曲线2次方程（bezierCurveTo）</h1>
        </header>
        <canvas id="bezierCurveTo2" width="400" height="300"></canvas>
        <script type="text/javascript">
            function bezierCurveTo2(id) {
                var can = document.getElementById(id);
                var cxt = can.getContext('2d');

                //绘制起始点、控制点、终点
                cxt.beginPath();
                cxt.moveTo(20,170);
                cxt.lineTo(130,40);   // 为了证实 控制点 坐标xp yp
                cxt.lineTo(180,150);
                cxt.stroke();

                cxt.strokeStyle = "rgba(255,0,0,1)";

                //绘制2次贝塞尔曲线
                cxt.beginPath();
                cxt.moveTo(20,170);
                cxt.quadraticCurveTo(130,40,180,150);   // cxt.quadraticCurveTo(xp,yp,x,y);  xp yp:控制点   x y :终点
                cxt.stroke();
            }
            bezierCurveTo2('bezierCurveTo2')
        </script>
    </section>

    <section>
        <header>
            <h1>贝塞尔曲线3次方程（bezierCurveTo）</h1>
        </header>
        <canvas id="bezierCurveTo3" width="400" height="300"></canvas>

        <script type="text/javascript">
            //http://lblovesnow-163-com.iteye.com/blog/1447918    http://cubic-bezier.com/
            // 贝塞尔曲线 必须有一个moveTo   作为起点 否则 则 使用第一控制点为起点 二次曲线也一样
            function bezierCurveTo3(id) {
                var canvas = document.getElementById(id);
                if (canvas == null) {
                    return false;
                }
                var context = canvas.getContext("2d");

                //绘制起始点、控制点、终点
                context.beginPath();
                context.moveTo(25,175);
                context.lineTo(60,80);
                context.lineTo(150,30);
                context.lineTo(170,150);
                context.stroke();

                //绘制3次贝塞尔曲线
                context.strokeStyle = "rgba(200,0,0,1)";
                context.beginPath();
                context.moveTo(25,175);
                context.bezierCurveTo(60,80,150,30,170,150);   // context.bezierCurveTo(xp1,yp1,xp2,yp2,x,y); xp1 yp1:第一控制点 xp2 yp2:第二控制点 x y:重点坐标
                context.stroke();
            }
            bezierCurveTo3('bezierCurveTo3')
        </script>
    </section>

    <section>
        <header>
            <h1>线性test（createLinearGradient addColorStop）</h1>
        </header>
        <canvas id="canvasGradient" width="400" height="300"></canvas>

        <script type="text/javascript">
            function canvasGradient(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext('2d'),
                    g1 = context.createLinearGradient(0, 0, 0, 300);    //createLinearGradient(xStart, yStart, xEnd, yEnd)

                //添加颜色
                g1.addColorStop(0, 'rgb(255,0,0)'); //红
                g1.addColorStop(0.5, 'rgb(0,255,0)');//绿
                g1.addColorStop(1, 'rgb(0,0,255)'); //蓝

                context.fillStyle = g1;
                context.fillRect(0, 0, 400, 300);
            }
            canvasGradient('canvasGradient')
        </script>
    </section>

    <section>
        <header>
            <h1>发散test（createRadialGradient）</h1>
        </header>
        <canvas id="RadialGradient" width="400" height="300"></canvas>

        <script type="text/javascript">
            function RadialGradient(id) {
                //同一个圆心画球型
                var canvas = document.getElementById(id),
                    context = canvas.getContext('2d');

                // 发散开始  createLinearGradient(xStart, yStart, radiusStart, xEnd, yEnd, radiusEnd)
                var g1 = context.createRadialGradient(200, 150, 0, 200, 150, 100);
                g1.addColorStop(0.1, 'rgb(255,0,0)');   //addColorStop(offset, color)  offset:0-1.0 浮点值 表示渐变位置 0:开始 1:尾部
                g1.addColorStop(1, 'rgb(50,0,0)');
                context.fillStyle = g1;

                 context.beginPath();
                 context.arc(200, 150, 100, 0, Math.PI * 2, true);
                 context.closePath();
                 context.fill();

                //不同圆心看径向渐变模型
                g1 = context.createRadialGradient(100, 150, 10, 300, 150, 50);
                g1.addColorStop(0.1, 'rgb(255,0,0)');
                g1.addColorStop(0.5, 'rgb(0,255,0)');
                g1.addColorStop(1, 'rgb(0,0,255)');
                context.fillStyle = g1;
                context.fillRect(0, 0, 400, 300);

            }
            RadialGradient('RadialGradient')
        </script>
    </section>

    <section>
        <header>
            <h1>平移 test（translate）缩放（scale） 旋转（rotate）</h1>
        </header>
        <canvas id="canvasTSR" width="400" height="300"></canvas>

        <script type="text/javascript">

            function canvasTSR(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d");

                context.save(); //保存了当前context的状态
                context.fillStyle = "#EEEEFF";
                context.fillRect(0, 0, 400, 300);

                context.fillStyle = "rgba(255,0,0,0.1)";
                //平移 缩放 旋转  1 2 3
                context.translate(100, 100);        //移动的是坐标轴
                context.scale(0.5, 0.5);            //缩放的是坐标轴比例
                context.rotate(Math.PI / 4);        //旋转的是坐标轴
                context.fillRect(0, 0, 100, 100);

                context.restore(); //恢复到刚刚保存的context状态

                context.fillStyle = "rgba(255,0,0,0.3)";
                //缩放 平移 旋转 2 1 3
                context.scale(0.5, 0.5);
                context.translate(100, 100);
                context.rotate(Math.PI / 4);
                context.fillRect(0, 0, 100, 100);
            }
            canvasTSR('canvasTSR')
        </script>
    </section>

    <section>
        <header>
            <h1>矩阵变换</h1>
        </header>
        <canvas id="transform" width="400" height="300"></canvas>

        <script type="text/javascript">
            function transform(id) {
                var canvas = document.getElementById(id);
                if (canvas == null)
                    return false;
                var context = canvas.getContext("2d");
                //定义颜色
                var colors = ["red", "orange", "yellow", "green", "blue", "navy", "perple"];
                //定义线宽
                context.lineWidth = 10;
                /*
                    transform: 在你使用scale 放大2倍后, 再使用transform 会继续放大2倍  如果想避免 可以使用setTransform();
                    transform(scaleX,rotateX,rotateY,scaleY,translateX,translateY);
                    矩阵原理:
                        http://www.alloyteam.com/2012/06/js-simple-geometric-transformation-the-package/#prettyPhoto
                        有道云笔记--css常用技能
                 */
                context.transform(1,0,0,1,100,0);
                //循环绘制圆弧
                for (var i = 0; i < colors.length; i++) {
                    //定义每次向下移动10个像素的变换矩阵
                    context.transform(1, 0, 0, 1, 0, 10);
                    //设定颜色
                    context.strokeStyle = colors[i];
                    context.beginPath();
                    context.arc(50, 100, 100, 0, Math.PI, true);
                    context.stroke();
                }
            }
            transform('transform')
        </script>
    </section>

    <section>
        <header>
            <h1>图形组合叠加(globalCompositeOperation)</h1>
        </header>
        <canvas id="constitute" width="400" height="300"></canvas>

        <script type="text/javascript">


            constitute('constitute')
            function constitute(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d"),
                    oprtns =new Array(
                        "source-over",
                        "destination-over",
                        "source-in",
                        "destination-in",
                        "source-out",
                        "destination-out",
                        "source-atop",
                        "destination-atop",
                        "lighter",
                        "xor",
                        "copy"
                    ),
                    i = 0;//组合效果编号

                //结合setinterval动态显示组合
                var interal = setInterval(function () {
                    if (i == 10) {
                        i=0;
                    }else {
                        i++;
                    }
                    //每次重绘前清空
                    context.clearRect(0,0,400,300)
                    //蓝色矩形
                    context.fillStyle = "blue";
                    context.fillRect(10, 10, 60, 60);
                    //设置组合方式
                    context.globalCompositeOperation = oprtns[i];
                    //设置新图形（红色圆形）
                    context.beginPath();
                    context.fillStyle = "red";
                    context.arc(60, 60, 30, 0, Math.PI * 2, false);
                    context.fill();
                }, 1000);

            }

        </script>
    </section>

    <section>
        <header>
            <h1>给图像绘制阴影</h1>
        </header>
        <canvas id="shadow" width="400" height="300"></canvas>
        <script type="text/javascript">
            function shadow(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext('2d');

                context.shadowOffsetX = 10;                         //阴影的横向位移量
                context.shadowOffsetY = 10;                         //阴影的纵向位移量
                context.shadowColor = 'rgba(100,100,100,0.5)';      //阴影的颜色
                context.shadowBlur = 1.5;                           //阴影的模糊范围

                context.fillRect(100, 100, 200, 100);
            }
            shadow('shadow')
        </script>
    </section>

    <section>
        <img src="image/drawImage.gif">  <!-- drawImage 可以参照Image文件夹下的drawImage.gif -->
    </section>
    <section>
        <header>
            <h1>绘制图像drawImage(image,x,y)</h1>
        </header>
        <canvas id="drawImage" width="400" height="300"></canvas>
        <script type="text/javascript">
            function drawImage(id) {

                var image = new Image();

                image.src = "Image/html5.jpg";
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d");

                image.onload = function () {
                    //裁剪图像 首先选择一个块 然后clip裁剪图像  clip: 只显示裁剪出的这个区域 对于本例 即就显示一个200,120的rect
                    context.rect(50,20,200,120);
                    context.stroke();
                    context.clip();

                    context.drawImage(image,0,10,150,150,0,0,250,250); //drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)  drawImage(image, dx, dy) drawImage(image, dx, dy, dw, dh)
                }
            }
            drawImage('drawImage')
        </script>
    </section>

    <section>
        <header>
            <h1>图像平铺</h1>
        </header>
        <canvas id="Pattern" width="400" height="300"></canvas>

        <script type="text/javascript">
            function Pattern(id) {
                //传统的平铺是用for循环来处理的，现在直接调用接口
                var image = new Image();
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d");

                var type = ["no-repeat", "repeat-x", "repeat-y", "repeat"];
                var i = 0;
                image.src = "Image/wordslogo.jpg";
                image.onload = function () {
                    var interval = setInterval(function () {
                        //每次转换平铺类型清空
                        context.clearRect(0, 0, 400, 300);
                        if (i >= 4) {
                            i = 0;
                        }
                        var ptrn = context.createPattern(image, type[i]);
                        context.fillStyle = ptrn;
                        context.fillRect(0, 0, 400, 300);
                        i++;
                    }, 1000);
                };
            }
            Pattern('Pattern');
        </script>
    </section>

    <section>
        <header>
            <h1>像素处理getImageData</h1>
        </header>
        <canvas id="ImageData" width="400" height="300"></canvas>

        <script type="text/javascript">
            function ImageData(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d");

                var image = new Image();
                image.src = "Image/html5.jpg";

                image.onload = function () {
                    //在左上角画一幅图片
                    context.drawImage(image, 0, 0,200,200);

                    //实验证明imagedata取的是canvas所在范围画的图形，不止是图片  不会取该区域内是空白的canvas的像素
                    var imagedata = context.getImageData(0, 0, 400, 300);     // 跨域操作的话,在本地测试的时候,把图片放到跟html不同一的文件夹里也会出现 The operation is insecure.(该操作是不安全的)

                    /*
                        上面那个创建imagedata 会有跨域的影响 参照-- http://vinqon.com/codeblog/?detail/11079
                        var object = object.createImageData(sw, sh, imagedata);  eg:imagedata{width:xx,height:xx}
                     */

                    //修改imagedata
                    for (var i = 0, n = imagedata.data.length; i < n; i += 4) {
                        imagedata.data[i + 0] = 255 - imagedata.data[i + 0]; //red;
                        imagedata.data[i + 1] = 255 - imagedata.data[i + 1]; //green
                        imagedata.data[i + 2] = 255 - imagedata.data[i + 2]; //blue
                        //imagedata.data[i + 3] = 255 - imagedata.data[i + 3]; //a
                    }
                    context.putImageData(imagedata,0 ,0,100,100,300,200); //imagedata, imagedata.x,imagedata.y,dirX(放置处理好的图像位置),dirY,dirWidth,dirHeight
                }
            }
            ImageData('ImageData')
        </script>
    </section>

    <section>
        <header>
            <h1>绘制文字fillText strokeText</h1>
        </header>
        <canvas id="fontText" width="400" height="300"></canvas>

        <script type="text/javascript">
            function fontText(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d");

                // 背景
                context.fillStyle = "#EEEEFF";
                context.fillRect(0,0,400,300);
                context.moveTo(5,50);
                context.lineTo(200,50);
                context.moveTo(150,20);
                context.lineTo(150,100);
                context.stroke();


                //字体设置
                context.fillStyle = "#00f";                 //  字体颜色
                context.font = "italic 30px sans-serif";    //  字体种类大小设置
                context.textBaseline = 'top';               //  textBaseline  绘制文本的时候,X基准。 (最近的一条 有可能是canva本身的边)
                context.textAlign='left';                      //  textAlign  绘制文本的时候,Y基准(最近的一条 有可能是canva本身的边)   可以参照书上example3.4

                //填充字符串
                var txt="fill示例文字";
                context.fillText(txt, 0, 0);
                var length=context.measureText(txt);
                context.fillText("长" + length.width + "px", 150,20);

                context.moveTo(5,100);
                context.lineTo(200,100);
                context.textBaseline='middle';
                context.stroke();

                context.font = "bolid 30px sans-serif";
                txt = "stroke示例文字";
                length = context.measureText(txt);

                context.strokeText(txt,0,100);
                context.fillText("长" + length.width + "px", 0, 150);
            }
            fontText('fontText')
        </script>
    </section>

    <section>
        <header>
            <h1>保存文件canvas.toDataURL</h1>
        </header>
        <canvas id="DataURL" width="400" height="300"></canvas>

        <script type="text/javascript">
            function DataURL(id) {
                var canvas = document.getElementById(id),
                    context = canvas.getContext("2d");

                context.fillStyle = "rgb(0,0,225)";
                context.fillRect(0, 0, canvas.width, canvas.height);
                context.fillStyle = "rgb(255,255,0)";
                context.fillRect(10, 20, 50, 50);
                // toDataURL(type,jpegquality);  默认为 image/png  jpegquality:0-1 反映图片质量
                var w=window.open(canvas.toDataURL("image/jpeg"),"smallwin","width=400,height=350");
            }
            DataURL('DataURL');

            function getImgByusetoBlog(id) {  //TODO 这样是一种存储图片的形式 他不仅仅可以用在canvas还可以用在 上传文件中  https://developer.mozilla.org/zh-CN/docs/Using_files_from_web_applications#.E4.BD.BF.E7.94.A8.E5.AF.B9.E8.B1.A1URL
                var canvas = document.getElementById(id);
                canvas.toBlob(function(blob) {                  //http://www.cnblogs.com/ziyunfei/archive/2012/10/25/2738186.html
                    var newImg = document.createElement("img"),
                            url = URL.createObjectURL(blob);  //https://developer.mozilla.org/zh-CN/docs/DOM/window.URL.createObjectURL
                    newImg.onload = function() {
                       window.URL.revokeObjectURL(url);
                    };
                    newImg.src = url;
                    document.body.appendChild(newImg);
                });
            }
        </script>
    </section>
    本问摘自:<a href="http://www.cnblogs.com/tim-li/archive/2012/08/06/2580252.html#top">玩转html5画图</a>
</body>

</html>
